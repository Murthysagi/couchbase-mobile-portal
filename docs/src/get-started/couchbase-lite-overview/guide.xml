<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="../../docs.xsd"
 id="couchbase-lite-overview">
 <title>Couchbase Lite Overview</title>
 <description>This guide will help you better understand how Couchbase Lite works and integrates across the solution.</description>
 <introduction>
  <paragraph>This guide will help you better understand how Couchbase Lite integrates within the Couchbase Mobile solution.  Couchbase Lite is a local storage system that is integrated in your application and is available on native iOS, Android, Java, .NET as well with REST API support. A fully functional on-device native embedded JSON 
  database for mobile devices that can work standalone, in a P2P network and connects to Sync Gateway.</paragraph>

  <paragraph>The Couchbase Lite database class comes with a set of database methods to allow you to fully manage and operate on your data. We will begin to explore the standard CRUD operations on the document in the “Articles" section.</paragraph>
 </introduction>
<articles>
    <article id="crud-operations">
     <title>CRUD Operations</title>
     <introduction>
     <paragraph>Couchbase Lite library provides data persistance directly on your device with full CRUD operations support.</paragraph>
     <paragraph>Data will be stored in a Document that is referenced by an unique ID within the Couchbase Lite database. Your data documents will consist of arbitrary JSON objects not enforced by rigid schemas. This provides an advantage of designing data models that can be naturally nested like a dictionary throughout the object model it is representing. This can be as natural or complex as needed when the data model is extended.</paragraph>
     </introduction>

     <topics>

      <topic id="create">
       <title>Create</title>
       <body>
        <paragraph>As mentioned, Sync Gateway represents the synchronization layer between Couchbase Lite, an embedded Json Database, and Couchbase server, a NoSQL database. It is usually publicly reachable on the Internet and can be considered as a point of control for security and scaling connection management between clients and Couchbase Server.</paragraph>

        <paragraph>All Couchbase Lite platforms can set up a push and/or pull replication to Sync Gateway. A simple example of what the code behind initiating replication for our user created earlier would look like is this:</paragraph>

        <code-block language="java"><![CDATA[
          URL url = new URL("http://localhost:4985/cfp_mobile_app/");
          Replication push = database.createPushReplication(url);
          Replication pull = database.createPullReplication(url);
          pull.setContinuous(true);
          push.setContinuous(true);
          Authenticator auth = new BasicAuthenticator("president", "password!");
          push.setAuthenticator(auth);
          pull.setAuthenticator(auth);
          ]]></code-block>

          <paragraph>Of course, your real application will manage things like the Sync Gateway URL and user as either fields or constants in the application.</paragraph>

          <paragraph>Once set up and deployed, you can imagine the deployment looking something like this:</paragraph>

          <paragraph>Note that you have different kinds of users who have different needs for access to the same set of data. Some such applications could have many thousands or tens of thousands of concurrent users. That is no problem since, you can scale out Sync Gateway just like you would Couchbase Server: by adding nodes.</paragraph>

        </body>
      </topic>


      <topic id="read">
       <title>Read</title>
       <body>
        <paragraph>For our CFP app, we’ve in effect defined a couple of different roles for our different users. Sync Gateway provides a method of defining roles for your authenticated users as well. Those different roles have different data access needs when working with the CFP submissions. Those who are submitting need access to their own submissions and those who are reviewing need access to all ‘submitted’ CFPs.</paragraph>

        <paragraph>As discussed earlier, Sync Gateway provides a place for user authentication for apps built on Couchbase Lite. It even provides federated user authentication with the most common services such as oauth, openId, mozilla persona. The authentication scheme is extendable as needed so you can connect it to your existing authentication services.</paragraph>

        <paragraph>Once you know who the user is, then you have to decide what they have access to. Sometimes, that access is not just a matter of security, it’s a matter of efficiency. With many large scale deployments the amount of data is so large that we won’t want to put all of the data on all devices. This is <strong>Data Routing</strong> and in Couchbase Mobile, it’s done with <strong>channels</strong>. </paragraph>
      </body>
    </topic>

    <topic id="update">
     <title>Update</title>
     <body>

      <paragraph>Conceptually, A document belongs to one or more channels. A user has access to 0 or more channels and they receive access to the items on the channel appropriate to their user or role. In this way, are similar to a tagged message queue.</paragraph>

      <paragraph>Channels typically have names that are meaningful to you, the application developer. For instance for our CFP application, we can imagine a defined channel being “submitted” proposals and a channel per user submitting. This will allow our application users to access their own data as much as needed and the reviewers to access all submitted data. </paragraph>

      <paragraph>To learn more about developing Access Control and Data Routing with channels see the <ref href="../../guides/sync-gateway/3-channel-development.xml">channels section of the Sync Gateway guide</ref>.</paragraph>
    </body>
  </topic>

  <topic id="delete">
   <title>Delete</title>
   <body>
    <paragraph>Validation exists at multiple levels in a Couchbase Mobile app deployment. It will usually be both in the app built on Couchbase Lite and at Sync Gateway.</paragraph>
    <paragraph>The best user experience is best given when your application validates data when it’s being created or manipulated. If for instance, we want to ensure that the CFP submission contains a title, the app you develop would of course not allow the record to be saved to Couchbase Lite until a title is entered.</paragraph>

    <paragraph>However, for security reasons and to have a single point of control where you will enforce business logic, you may want to make sure the data sent to sync gateway is actually valid from a 'server side' point of view. For this, the Sync Gateway provides a functional programming interface where you will typically do a subset of checks.</paragraph>

    <paragraph>Let's expand our simple example. You want all your documents to have a 'type' and an 'owner' field. The type field is used to adapt business rules to your documents and the owner is used for security purposes(only the logged in user can delete said document).</paragraph>

    <paragraph>If a document has no type than we don't know what to do with it. So we can throw an error saying the document is invalid.</paragraph>

    <paragraph>If the document has no owner field and someone tries to delete it, we cannot do a security check, so we throw another error saying the document structure is invalid.</paragraph>

    <code-block language="java"><![CDATA[
      if (! doc.owner) {
      throw (forbidden:"For security reason a document must have an owner.")
      }

      if (! doc.type) {
      throw (forbidden:"A document must have a type.")
      }
      ]]></code-block>

      <paragraph>What if a user tries to modify the existing owner field to put his username instead? If it works the user will be able to delete the document. To avoid this, you can actually do validation using the previous document revision and the current one. The validation check would assure that the owner field is still the same:</paragraph>

      <code-block language="java"><![CDATA[
        if (oldDoc.owner != doc.owner) {
        throw (forbidden:"You can't modify the owner field.")
        }
        ]]></code-block>

        <paragraph>Of course these rules need to be implemented in the app using Couchbase Lite. Since the Sync gateway is public, you typically also need that server side validation.</paragraph>
      </body>
    </topic>
  </topics>

</article>

<article id="summary">
 <title>Summary</title>
 <introduction>
  <paragraph>
    With Couchbase Lite, data is stored locally on the device where data is decoupled and not dependent on network connectivity. With offline functionality, the stored data model attributes are in local JSON documents where you are able to have full access and control over.
  </paragraph>

  <paragraph>
    The database is a local container and namespace for JSON documents that comes with a set of database operation methods. From offline mode to online mode, the database is also the source and target of the data replication that occurs on the documents when documents are synced to the cloud.
  </paragraph>
  <paragraph>
    To learn more, see the next section on "What is Sync Gateway" to begin syncing your application data to the cloud.
  </paragraph>
</introduction>
</article>
</articles>
</guide>
