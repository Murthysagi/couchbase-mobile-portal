<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="indexing">
    <title>Index and MapReduce</title>
    <description>This guide shows you how to build an Index using MapReduce.</description>
    <introduction>
        <paragraph>
            <paragraph>Yes. <strong>MapReduce</strong>. If you are not familiar with it don't be afraid, it's actually quite simple.</paragraph>
        </paragraph>
    </introduction>
    <topics>
        <topic id="map">
            <title>The Map Function</title>
            <body>
                <paragraph>So what is <strong>MapReduce</strong> you may ask? To make things simple, it's a couple of function that will be executed to build our index. Let's start with the Map function.</paragraph>
                <paragraph>It takes two arguments: a document and an emitter. The emitter is an object use to add entries to an index. The document is a JSON document stored in the database. This Map function will be executed for all the JSON documents available. It means you have an attempt to use the emitter for each document. The resulting index in Couchbase terminology is called a <strong><a href="http://developer.couchbase.com/mobile/develop/guides/couchbase-lite/native-api/view/index.html">View</a></strong>.</paragraph>
                <paragraph>Here's a simple example with a JSON document representing a product.</paragraph>
                <code-block language="javascript"><![CDATA[
                {
                "type":"Product",
                 "created_at":"1419854647",
                 "productName":"MyProduct"
                }
                ]]></code-block>
                <paragraph>The following Map function first argument is our JSON document represented as a Map object. The second argument is the Emitter object that allows to add entry to an index.</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                      @Override 
                      public void map(Map<String, Object> document, Emitter emitter) { 
                        if ("Product".equals(document.get("type"))) { 
                          emitter.emit(document.get("created_at"), document.get("productName"));  
                        }
                      }
                    ]]></code-block>              
                </code-set>
                <paragraph>The Map function you see here will add an index entry for every document stored in the database which <strong>type</strong> field value is "Product". This index entry will have a key and a value. The key is the first argument of the emit function and the value is the second argument. So as you can see here, the key is the "created_at" field and the value is the "productName" field.</paragraph>
                <paragraph>Now there is an index that would look like this:</paragraph>
                <table>
                    <tr><td>Key</td><td>Value</td></tr>
                    <tr><td>1419854647</td><td>MyProductName</td></tr>
                    <tr><td>docId3</td><td></td></tr>
                    <tr><td>1419854648</td><td>AnotherProductName</td></tr>
                    <tr><td>docId1</td><td></td></tr>
                    <tr><td>1419854649</td><td>YetAnotherProductName</td></tr>
                    <tr><td>docId2</td><td></td></tr>
                    <tr><td>...</td><td></td></tr>
                </table>
                <paragraph>This index is sorted using the key using UNICODE collation. In addition to the value, every index entry always has the id of the document used to create it.And this index can of course be queried or Reduced. Which takes us to the Reduce function.</paragraph>
            </body>
        </topic>
        <topic id="reduce">
            <title>The Reduce Function</title>
            <body>
                <paragraph>It's totally optional and not as commonly used as the Map function. It's goal is to process the resulting index of a map function applied to all the document database.</paragraph>
                <paragraph>It can be used for instance to compute the total of "Product" in the database. Because we have a map function that already created an index with an entry for each Product in the database, we can associate the following reduce to it:</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                      @Override 
                      public Object reduce(List<Object> keys, List<Object> values, boolean rereduce) {
                        return new Integer(values.size());
                      }
                  ]]></code-block>              
                </code-set>
                <paragraph>As you can see it's dead simple. The first argument is the list of keys, the second is the list of values and the third one is a boolean that allow another reduce function to be ran after this one. To return the total number of products, all we have to do is to return the size of the first or second arguments.</paragraph>
                <paragraph>As I said previously, an Index created by a MapReduce is called a <strong>View</strong> in Couchbase terminology. So if you want to use it in your code, you need to ask for a View. It it does not exist, it will be created for you:</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                    // Create a view and register its map and reduce functions:
                    View productView = database.getView("products");
                    productView.setMapReduce(new Mapper() {
                        @Override
                        public void map(Map<String, Object> document, Emitter emitter) {
                          if ("Product".equals(document.get("type"))) { 
                            emitter.emit(document.get("created_at"), document.get("productName")); 
                          }
                        }
                        }, new Reducer() {
                           @Override
                           public Object reduce(List<Object> keys, List<Object> values, boolean rereduce) {
                             return new Integer(values.size());
                           }
                       }, "2");
                    ]]></code-block> 
                </code-set>
                <paragraph>You will find more details on Couchabse Views in the <a href="http://developer.couchbase.com/mobile/develop/guides/couchbase-lite/native-api/view/index.html">reference guide</a>
</paragraph>
            </body>
        </topic>
    </topics>
</article>
