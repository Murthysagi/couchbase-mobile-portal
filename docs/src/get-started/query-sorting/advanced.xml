<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="advanced">
    <title>Advanced</title>
    <description>This guide shows you advanced patterns and usage of queries in Couchbase Lite.</description>
    <introduction>
        <paragraph>
            Now that you are familiar with basic usages of View and queries in Couchbase Lite, this is a couple of patterns and classic usage of queries and views.
        </paragraph>
    </introduction>
    <topics>
        <topic id="prefixMatching">
            <title>Prefix Matching</title>
            <body>
                <paragraph>If you are writing an app that store Contacts, and a lot of them, you want the UI to offer a nice, easy way to search through them. The most common solution proposed for this use case is having a filter. User starts to type the name of the contact and a list is updated real time while he adds more characters.</paragraph>
                <paragraph>This would require several steps. The first one being to create a normalized index. The goal here is to make sure you put everything to lower case and remove all accents(diacritic signs in academic terms). This work will occur in the Map function.</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                      @Override 
                      public void map(Map<String, Object> document, Emitter emitter) { 
                        if ("Contact".equals(document.get("type"))) { 
                          String username = (String) document.get("username");
                          String NMDUsername = normalize(username);
                          String firstName = (String) document.get("firstName");
                          String lastName = (String) document.get("lastName");
                          String[] values = {firstName, lastName};
                          emitter.emit(NMDUsername, values); 
                        }
                      }
                    ]]></code-block>              
                </code-set>
                <paragraph>Here you can assume that the call to the normalize function will take care of everything(convert to lowercase, removing diacritics).</paragraph>
                <paragraph>Another new thing is the creation of a values array for the index entry. Since the goal is to filter contacts, it's good to have the first and last name available to build the UI. And the document Id will be available as it is always part of an index entry.</paragraph>
                <paragraph>Tnis Index will obvisouly be used by a range query. So you need a start key and en end key..</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                        Query query = database.getView("contacts").createQuery();
                        query.setMapOnly(false);
                        query.setStartKey("smi");
                        query.setEndKey("smi\uFFFE");
                        QueryEnumerator result = query.run();
                        Integer total = (Integer) result.getRow(0).getValue();
                    ]]></code-block>              
                </code-set>
                <paragraph>Use this new view in a LiveQuery and you easiliy have a real-time updated contacts filter.</paragraph>
            </body>
        </topic>
        <topic id="multipleProperties">
            <title>Multiple Properties</title>
            <body>
                <paragraph>Having a normalized username based index is one thing but what if it does not reflect the name of the contact? If it's 'user1' and the user type 'Smith' in the filter, he won't get any results. To fix this you can also add an index entry for the firstName, one for the lastName, maybe one for the emailAddress or any field you would like your contacts to be searchable for.</paragraph>
                <code-set>
                    <code-block language="java"><![CDATA[
                      @Override 
                      public void map(Map<String, Object> document, Emitter emitter) { 
                        if ("Contact".equals(document.get("type"))) { 
                          String username = (String) document.get("username");
                          String NMDUsername = normalize(username);
                          String firstName = (String) document.get("firstName");
                          String lastName = (String) document.get("lastName");
                          String NMDFname = normalize(firstName);
                          String NMDLname = normalize(lastName);
                          String[] values = {firstName, lastName};
                          emitter.emit(NMDUsername, values); 
                          emitter.emit(NMDFname, values); 
                          emitter.emit(NMDLname, values); 
                        }
                      }
                    ]]></code-block>              
                </code-set>
            </body>
        </topic>
        <topic id="compoundKeyx">
            <title>Compound Keys</title>
            <body>
                <paragraph></paragraph>
            </body>
        </topic>
        <topic id="pseudoJoins">
            <title>Pseudo Joins</title>
            <body>
            </body>
        </topic>
        <topic id="allDoc">
            <title>The allDoc query</title>
            <body>
            </body>
        </topic>
    </topics>
</article>
